---
- hosts: localhost
  vars_prompt:
# Use exsisting Vars, or restart the questionare.
    - name: "fresh_vars"
      prompt: This script saves host settings, if they exist, do you want to update them? (y/n)
      private: no

# Are we installing this locally?
    - name: "Local_install"
      prompt: Are we installing Moloch to the local Machine? (y/n)
      private: no

# Set hostname
    - name: "node_name"
      prompt: Please input the hostname for moloch.
      private: no

# Testing linux version
  pre_tasks:
    - name: Checking Linux Distro.
      fail:
        msg: "The flavor of linux you are using is currently not supported, please open an issue on github at https://github.com/problematiq/Ansible_Moloch-all-in-one/issues"
      when:
        - ansible_distribution != "Ubuntu"
        - ansible_distribution != "Debian"

# Shortening the path for certs.
    - set_fact:
        key_prefix: "/data/moloch/etc/certs/{{ node_name }}/{{ node_name }}"

# File checking
    - name: Checking to see if certs exsist
      stat:
        path: "{{ key_prefix }}.crt"
      register: "node_certs_exists"

    - name: Checking for pre-defined variables.
      stat:
        path: /opt/ansible/vars/{{ node_name }}_variables.yml
      register: "vars_exists"

# if variable file exsists, then include vars from file
    - name: Including variables
      include_vars: /opt/ansible/vars/{{ node_name }}_variables.yml
      when:
        - vars_exists.stat.exists == True
        - fresh_vars|lower == "n"

# Does the user wish to install wise?
    - pause:
        prompt: Do you wish to install WISE? (y/n)
      register: "install_wise"
      when: install_wise is not defined

# Set selfsign to "No" when certs are found
    - set_fact:
        self_sign: "n"
        when:
          - node_certs_exists.stat.exists == True
          - self_sign is not defined

# do you want to let the script handle cert creation?
    - pause:
        prompt: Do you want to create self-signed certs? (y/n)
      register: "self_sign"
      when: self_sign is not defined

# If user has certs, where are they located on the host?
    - pause:
        prompt: specify the path and directory your certs you wish to use are located. (e.g /opt/certs)
      register: "cert_path"
      when: ( self_sign.user_input|lower == "n" ) or
            ( self_sign == "n" ) and
            ( node_certs_exists.stat.exists == False )

# if self-signed certs were created, use their path for configs
    - set_fact:
        cert_path: "{{ key_prefix }}"
      when: ( self_sign.user_input|lower == "y" ) or
            ( self_sign == "y" )

# Does the user wish to install ES locally, or do they have a remote node/cluster?
    - pause:
        prompt: Do you want to install ES locally? (y/n)
      register: local_es
      when: local_es is not defined

# If user has remote node/cluster, then what is the url?
    - pause:
        prompt: What is the URL for ElasticSearch? (http://eshost:9200)
      register: remote_es_url
      when: ( local_es.user_input|lower == "n" ) or
            ( local_es == "n" )

#FIXME# Will this moloch be used for pcap ingestion, or monitoring an interface?
#     - pause:
#         prompt: will this Moloch be monitoring traffic from an interface? (y/n)
#       no_log: true
#       register: data_ingest
#       when: data_ingest is not defined

# Let the script handle interfaces, or enter them manually.
    - pause:
        prompt: Do you want to specify an interface (y), or let this script Auto set them? (n)
      register: set_interfaces
      when: interfaces is not defined

# Manually set interface names.
    - pause:
        prompt: Please enter the name of the interfaces seperated by Semicolons. (e.g eth1;eno3;enp1so4)
      register: monitoring_ports
      when: ( set_interfaces.user_input|lower == "y" ) or
            ( set_interfaces == "y" ) and
            ( monitoring_ports is not defined )

# set password for ES user data encryption.
    - pause:
        prompt: Please enter a Secret password used to encrypt the user data in ES.
      register: es_secret
      when: es_secret is not defined

# Actually start doing something.
    - include_role:
        name: pre-deployment
